from .part2 import *
import pytest
from .part1 import find_matches


@pytest.mark.parametrize(
    "input,expected",
    [
        ("???.### 1,1,3", 1),
        (".??..??...?##. 1,1,3", 16384),
        ("?#?#?#?#?#?#?#? 1,3,1,6", 1),
        ("????.#...#... 4,1,1", 16),
        ("????.######..#####. 1,6,5", 2500),
        (".##????.?.#.????? 4,1,1,3,1", 2592),
        ("???#??.?#??.? 2,2", 1024),
        ("???#??#?#?#???#???#? 8,9", 68),
        ("???#?##??..?#??#? 9,2,2", 768),
        ("???##????????#?? 7,4", 843069),
        ("?#?.???????.#. 2,1,3,1", 248832),
        ("?????#.??#. 2,1,1", 14176),
        ("?##???.???#?...?? 4,3", 5184),
        ("#??????.#??? 4,1,1,1", 38810),
        (".?.#?.????#.?#???# 1,1,1,1,6", 16384),
        (".#?#?????.?..#??##? 5,2,2", 1),
        ("?#???##?????? 3,2,1", 724490),
        ("..??.????#?.? 1,2", 608477),
        ("???????##? 1,5", 305648),
        ("??#???????#..??????. 11,4", 243),
        ("????##????#??#?? 10,3", 528),
        ("?#???????? 1,3,1", 1337329),
        ("????.?#??..#? 1,2,1,1", 616355),
        ("##?.????.?.?. 3,1,1,1", 1600000),
        ("?..??#.????? 1,3,1", 564764),
        ("?#????..??.???#?? 5,1,1,3", 1355748),
        ("???.???##??#?? 2,1,3,1", 629856),
        ("??????.?????#?##?#? 3,2,1,5", 939700),
        ("?.?#????????? 5,2,1", 307148),
        ("???#...????# 1,1,1,1", 113087),
        ("??#?#?.?????????? 4,6", 367370),
        ("??##??#???..?? 2,2,1,1", 891984),
        ("?.?##??.???#??? 1,3,3", 629856),
        (".#?????????#? 2,2,2", 192969),
        ("##??????.??? 4,1,2", 95256),
        (".????.#?#???????? 2,3,2,3", 944784),
        ("??.??.?.#?##??.???? 1,1,1,6,1,1", 3358092),
        ("#??.?#??????#?????.? 1,3,6,2", 1150228),
        ("????????????##??. 5,7", 186624),
        ("??#?.???????? 2,4,1,1", 76832),
        (".??.??.??.??##. 1,1,1,1,2", 4917248),
    ],
)
def test_process_line(input, expected):
    result = process_line(input)
    assert result == expected


@pytest.mark.parametrize(
    "coils, pattern, expected",
    [
        (".???", [], 1),
        (".#.", [1], 1),
        ("....", [1], 0),
        (".?....", [1], 1),
        (".#.?..", [1], 1),
        (".?.?..", [1], 2),
        (".?...?", [1], 2),
        ("???.###", [1, 1, 3], 1),
        ("????.#...#...?????.#...#...", [4, 1, 1, 4, 1, 1], 2),
        (".??..??...?##.", [1, 1, 3], 4),
        ("???", [2], 2),
        ("###????", [3, 2], 2),
        ("?###????????", [3, 2, 1], 10),
        ("??????", [2, 1], 6),
        ("?#?#?#?#?#?#?#?", [1, 3, 1, 6], 1),
        ("???????##?", [1, 5], 7),
        ("???????##?????????##?", [1, 5, 1, 5], 98),
        (".?????????????.", [1, 1], 66),
    ],
)
def test_count_matches(coils, pattern, expected):
    # print(list(find_matches(coils, pattern)))
    result = count_matches(coils, pattern)
    assert result == expected


@pytest.mark.parametrize(
    "coils, pattern, expected",
    [("???????##?", [1, 5], 7), ("???????##?????????##?", [1, 5, 1, 5], 98)],
)
def test_part1_find_matches(coils, pattern, expected):
    result = len(list(find_matches(coils, pattern)))
    assert result == expected
